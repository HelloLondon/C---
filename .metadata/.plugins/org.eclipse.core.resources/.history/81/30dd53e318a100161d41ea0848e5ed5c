#include <iostream>
#include <string>
#include <istream>
#include "matrix.cpp"
using namespace std;

void makeOperation(Matrix *,int *);

void parseInput(int *matrix, int data[], int depth, int rAc[], int start, int end){
	int row = rAc[0];
	int col = rAc[1];
//	cout << "Row :: " << row << "     Col :: " << col << endl;
	if(depth == 1) {
		//Fill it directly
		for(int i = 0; i < row; i ++) {
			for(int j = 0; j < col; j ++) {
				*(matrix + i*col + j) = *(data + start + i * col + j);
			}
		}
		return;
	}
	for(int i = 0; i < row; i ++) {
		for(int j = 0; j < col; j ++) {
			int length = (end - start + 1)/(row * col);
			int offset = length * (i * col + j);
			parseInput(matrix + offset, data, depth - 1, rAc + 2, start + offset, start + offset + length - 1);
		}
	}
}

int main(){
	int count;
	cin >> count;
	if(count == 0) {
		return 0;
	}
	Matrix *matrixs[10];
	int depths[count];
	int rAc[count][100];
	int data[count][10000];
	for(int i = 0; i < count ; i ++) {
		int depth;
		cin >> depth;
		depths[i] = depth;
		int row = 1,col = 1;
		for(int j = 0; j < depth; j ++) {
			int eR;
			int eC;
			cin >> eR >> eC;
			row *= eR;
			col *= eC;
			rAc[i][j*2] = eR;
			rAc[i][1 + j*2] = eC;
		}
		matrixs[i] = new Matrix();
		matrixs[i]->row = row;
		matrixs[i]->col = col;
		matrixs[i]->data = new int[col*row];
		for(int k = 0;k < row*col; k ++) {
			cin >> data[i][k];
		}
	}
	//构建矩阵
	for(int i = 0; i < count; i ++) {
		int end = (matrixs[i]->row)*(matrixs[i]->col) - 1;
		parseInput(matrixs[i]->data, data[i], depths[i], rAc[i], 0, end);
	}
//	cout << "Read End";
//	int opCount;
//	cin >> opCount;
	//解析操作符：
	int opCount;
	cin >> opCount;
	int operation[opCount][4];
	for(int i = 0; i < opCount ; i ++) {
		cin >> operation[i][0];
//		cout << operation[i][0]<<endl;
		switch(operation[i][0]) {
		case 0:
			cin >> operation[i][1];
			break;
		case 1:
			cin >> operation[i][1] ;
			break;
		case 2:
			cin >> operation[i][1];
			cin >> operation[i][2];
			cin >> operation[i][3];
			break;
		case 3:
			cin >> operation[i][1];
			cin >> operation[i][2];
			cin >> operation[i][3];
			break;
		default:
			break;
		}
	}
	for(int i = 0; i < opCount; i ++) {
		cout << operation[0] << endl;
	}

//	cout << opCount;
//	for(int i = 0; i < opCount; i ++) {
//		for(int j = 0; j < 4; j ++) {
//			cout << operation[i][j] << "  ";
//		}
//		cout << endl;
//	}
//	for(int i = 0; i < opCount; i ++) {
//		Matrix *first,*second;
//		switch(operation[i][0]) {
//			case 0:
//				matrixs[operation[i][1]]->print();
//				cout << endl;
//				break;
//			case 1:
//				cout << matrixs[operation[i][1]]->flattern();
//				cout << endl;
//				break;
//			case 2:
//				first = matrixs[operation[i][1]];
//				second = matrixs[operation[i][2]];
//
//					matrixs[operation[i][3]] = new Matrix();
//					matrixs[operation[i][3]]->row = first->row;
//					matrixs[operation[i][3]]->col = second->col;
//
//					cout << first->row << "   "<< second->col;
////					cout << endl << size;
////					matrixs[operation[i][3]]->data = new int[(first->row)*(second->col)];	if(matrixs[operation[i][3]]->data == NULL||matrixs[operation[i][3]]==NULL) {
////				}
////				first->add(second, matrixs[operation[i][3]]);
//				break;
//			case 3:
//				first = matrixs[operation[i][1]];
//				second = matrixs[operation[i][2]];
//				if(matrixs[operation[i][3]] == NULL||matrixs[operation[i][3]]==NULL) {
//					matrixs[operation[i][3]] = new Matrix();
//					matrixs[operation[i][3]]->row = first->row;
//					matrixs[operation[i][3]]->col = second->col;
//					matrixs[operation[i][3]]->data = new int[(first->row)*(second->col)];
//				}
//				first->multiply(second, matrixs[operation[i][3]]);
//				break;
//			default:
//				break;
//			}
//	}
//	for(int i = 0; i < 10; i ++) {
//		if(matrixs[i] != NULL) {
//			if(matrixs[i]->data!=NULL){
//			delete matrixs[i]->data;
//			}
//			delete matrixs[i];
//		}
//	}
}

